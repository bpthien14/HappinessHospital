#!/usr/bin/env python3
"""
Script setup permissions cho Hospital Management System
D·ª±a tr√™n nghi·ªáp v·ª• th·ª±c t·∫ø t·ª´ c√°c bi·ªÉu ƒë·ªì lu·ªìng
"""

import os
import sys
import django

# Setup Django environment
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from apps.users.models import Permission, Role, User
from apps.users.models import UserRole

def create_permissions():
    """T·∫°o t·∫•t c·∫£ permissions c·∫ßn thi·∫øt cho h·ªá th·ªëng"""
    
    permissions_data = [
        # === PATIENT MANAGEMENT ===
        ('PATIENT:CREATE', 'T·∫°o b·ªánh nh√¢n m·ªõi', 'PATIENT', 'CREATE'),
        ('PATIENT:READ', 'Xem th√¥ng tin b·ªánh nh√¢n', 'PATIENT', 'READ'),
        ('PATIENT:UPDATE', 'C·∫≠p nh·∫≠t th√¥ng tin b·ªánh nh√¢n', 'PATIENT', 'UPDATE'),
        ('PATIENT:DELETE', 'X√≥a b·ªánh nh√¢n', 'PATIENT', 'DELETE'),
        ('PATIENT:SEARCH', 'T√¨m ki·∫øm b·ªánh nh√¢n', 'PATIENT', 'SEARCH'),
        ('PATIENT:EXPORT', 'Xu·∫•t d·ªØ li·ªáu b·ªánh nh√¢n', 'PATIENT', 'EXPORT'),
        
        # === MEDICAL RECORDS ===
        ('MEDICAL_RECORD:CREATE', 'T·∫°o h·ªì s∆° y t·∫ø', 'MEDICAL_RECORD', 'CREATE'),
        ('MEDICAL_RECORD:READ', 'Xem h·ªì s∆° y t·∫ø', 'MEDICAL_RECORD', 'READ'),
        ('MEDICAL_RECORD:UPDATE', 'C·∫≠p nh·∫≠t h·ªì s∆° y t·∫ø', 'MEDICAL_RECORD', 'UPDATE'),
        ('MEDICAL_RECORD:DELETE', 'X√≥a h·ªì s∆° y t·∫ø', 'MEDICAL_RECORD', 'DELETE'),
        ('MEDICAL_RECORD:APPROVE', 'Duy·ªát h·ªì s∆° y t·∫ø', 'MEDICAL_RECORD', 'APPROVE'),
        
        # === APPOINTMENTS ===
        ('APPOINTMENT:CREATE', 'T·∫°o l·ªãch kh√°m', 'APPOINTMENT', 'CREATE'),
        ('APPOINTMENT:READ', 'Xem l·ªãch kh√°m', 'APPOINTMENT', 'READ'),
        ('APPOINTMENT:UPDATE', 'C·∫≠p nh·∫≠t l·ªãch kh√°m', 'APPOINTMENT', 'UPDATE'),
        ('APPOINTMENT:DELETE', 'X√≥a l·ªãch kh√°m', 'APPOINTMENT', 'DELETE'),
        ('APPOINTMENT:ASSIGN_DOCTOR', 'Ph√¢n b·ªï b√°c sƒ©', 'APPOINTMENT', 'ASSIGN_DOCTOR'),
        ('APPOINTMENT:CANCEL', 'H·ªßy l·ªãch kh√°m', 'APPOINTMENT', 'CANCEL'),
        
        # === PRESCRIPTIONS ===
        ('PRESCRIPTION:CREATE', 'K√™ ƒë∆°n thu·ªëc', 'PRESCRIPTION', 'CREATE'),
        ('PRESCRIPTION:READ', 'Xem ƒë∆°n thu·ªëc', 'PRESCRIPTION', 'READ'),
        ('PRESCRIPTION:UPDATE', 'C·∫≠p nh·∫≠t ƒë∆°n thu·ªëc', 'PRESCRIPTION', 'UPDATE'),
        ('PRESCRIPTION:DELETE', 'X√≥a ƒë∆°n thu·ªëc', 'PRESCRIPTION', 'DELETE'),
        ('PRESCRIPTION:APPROVE', 'Duy·ªát ƒë∆°n thu·ªëc', 'PRESCRIPTION', 'APPROVE'),
        ('PRESCRIPTION:PREPARE', 'So·∫°n thu·ªëc', 'PRESCRIPTION', 'PREPARE'),
        ('PRESCRIPTION:DISPENSE', 'C·∫•p ph√°t thu·ªëc', 'PRESCRIPTION', 'DISPENSE'),
        ('PRESCRIPTION:UPDATE_STATUS', 'C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n thu·ªëc', 'PRESCRIPTION', 'UPDATE_STATUS'),
        
        # === TESTING (CLS) ===
        ('TESTING:CREATE', 'T·∫°o ch·ªâ ƒë·ªãnh x√©t nghi·ªám', 'TESTING', 'CREATE'),
        ('TESTING:READ', 'Xem k·∫øt qu·∫£ x√©t nghi·ªám', 'TESTING', 'READ'),
        ('TESTING:UPDATE', 'C·∫≠p nh·∫≠t k·∫øt qu·∫£ x√©t nghi·ªám', 'TESTING', 'UPDATE'),
        ('TESTING:DELETE', 'X√≥a x√©t nghi·ªám', 'TESTING', 'DELETE'),
        ('TESTING:PERFORM', 'Th·ª±c hi·ªán x√©t nghi·ªám', 'TESTING', 'PERFORM'),
        ('TESTING:APPROVE', 'Duy·ªát k·∫øt qu·∫£ x√©t nghi·ªám', 'TESTING', 'APPROVE'),
        
        # === PAYMENTS & BHYT ===
        ('PAYMENT:CREATE', 'T·∫°o thanh to√°n', 'PAYMENT', 'CREATE'),
        ('PAYMENT:READ', 'Xem thanh to√°n', 'PAYMENT', 'READ'),
        ('PAYMENT:UPDATE', 'C·∫≠p nh·∫≠t thanh to√°n', 'PAYMENT', 'UPDATE'),
        ('PAYMENT:DELETE', 'X√≥a thanh to√°n', 'PAYMENT', 'DELETE'),
        ('PAYMENT:APPROVE', 'Duy·ªát thanh to√°n', 'PAYMENT', 'APPROVE'),
        ('BHYT:VERIFY', 'X√°c th·ª±c th·∫ª BHYT', 'BHYT', 'VERIFY'),
        ('BHYT:SETTLEMENT', 'Quy·∫øt to√°n BHYT', 'BHYT', 'SETTLEMENT'),
        ('BHYT:READ', 'Xem th√¥ng tin BHYT', 'BHYT', 'READ'),
        
        # === USER MANAGEMENT ===
        ('USER:CREATE', 'T·∫°o user m·ªõi', 'USER', 'CREATE'),
        ('USER:READ', 'Xem th√¥ng tin user', 'USER', 'READ'),
        ('USER:UPDATE', 'C·∫≠p nh·∫≠t user', 'USER', 'UPDATE'),
        ('USER:DELETE', 'X√≥a user', 'USER', 'DELETE'),
        ('USER:ASSIGN_ROLE', 'Ph√¢n quy·ªÅn user', 'USER', 'ASSIGN_ROLE'),
        
        # === ROLE MANAGEMENT ===
        ('ROLE:CREATE', 'T·∫°o role m·ªõi', 'ROLE', 'CREATE'),
        ('ROLE:READ', 'Xem th√¥ng tin role', 'ROLE', 'READ'),
        ('ROLE:UPDATE', 'C·∫≠p nh·∫≠t role', 'ROLE', 'UPDATE'),
        ('ROLE:DELETE', 'X√≥a role', 'ROLE', 'DELETE'),
        ('ROLE:ASSIGN_PERMISSION', 'Ph√¢n quy·ªÅn cho role', 'ROLE', 'ASSIGN_PERMISSION'),
        
        # === REPORTS & ANALYTICS ===
        ('REPORT:READ', 'Xem b√°o c√°o', 'REPORT', 'READ'),
        ('REPORT:CREATE', 'T·∫°o b√°o c√°o', 'REPORT', 'CREATE'),
        ('REPORT:EXPORT', 'Xu·∫•t b√°o c√°o', 'REPORT', 'EXPORT'),
        ('REPORT:APPROVE', 'Duy·ªát b√°o c√°o', 'REPORT', 'APPROVE'),
        
        # === NOTIFICATIONS ===
        ('NOTIFICATION:CREATE', 'T·∫°o th√¥ng b√°o', 'NOTIFICATION', 'CREATE'),
        ('NOTIFICATION:READ', 'Xem th√¥ng b√°o', 'NOTIFICATION', 'READ'),
        ('NOTIFICATION:SEND', 'G·ª≠i th√¥ng b√°o', 'NOTIFICATION', 'SEND'),
        ('NOTIFICATION:MANAGE', 'Qu·∫£n l√Ω th√¥ng b√°o', 'NOTIFICATION', 'MANAGE'),
        
        # === SYSTEM ADMIN ===
        ('SYSTEM:CONFIG', 'C·∫•u h√¨nh h·ªá th·ªëng', 'SYSTEM', 'CONFIG'),
        ('SYSTEM:BACKUP', 'Sao l∆∞u d·ªØ li·ªáu', 'SYSTEM', 'BACKUP'),
        ('SYSTEM:RESTORE', 'Kh√¥i ph·ª•c d·ªØ li·ªáu', 'SYSTEM', 'RESTORE'),
        ('SYSTEM:LOG', 'Xem log h·ªá th·ªëng', 'SYSTEM', 'LOG'),
    ]
    
    created_permissions = []
    for name, desc, resource, action in permissions_data:
        permission, created = Permission.objects.get_or_create(
            name=name,
            defaults={
                'description': desc,
                'resource': resource,
                'action': action
            }
        )
        created_permissions.append(permission)
        if created:
            print(f"‚úÖ Created permission: {name}")
        else:
            print(f"‚ÑπÔ∏è  Permission already exists: {name}")
    
    print(f"\nüìä Total permissions: {len(created_permissions)}")
    return created_permissions

def create_roles():
    """T·∫°o c√°c roles v·ªõi quy·ªÅn ph√π h·ª£p theo nghi·ªáp v·ª•"""
    
    roles_data = [
        {
            'name': 'Super Admin',
            'description': 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng - To√†n quy·ªÅn',
            'role_type': 'SYSTEM',
            'permissions': ['*']  # T·∫•t c·∫£ permissions
        },
        {
            'name': 'Hospital Admin',
            'description': 'Qu·∫£n tr·ªã vi√™n b·ªánh vi·ªán - Qu·∫£n l√Ω to√†n b·ªô b·ªánh vi·ªán',
            'role_type': 'HOSPITAL',
            'permissions': [
                'PATIENT:*', 'MEDICAL_RECORD:*', 'APPOINTMENT:*', 'PRESCRIPTION:*',
                'TESTING:*', 'PAYMENT:*', 'BHYT:*', 'USER:*', 'ROLE:*',
                'REPORT:*', 'NOTIFICATION:*', 'SYSTEM:CONFIG', 'SYSTEM:LOG'
            ]
        },
        {
            'name': 'Department Head',
            'description': 'Tr∆∞·ªüng khoa - Qu·∫£n l√Ω khoa/ph√≤ng ban',
            'role_type': 'DEPARTMENT',
            'permissions': [
                'PATIENT:READ', 'PATIENT:UPDATE', 'PATIENT:SEARCH',
                'MEDICAL_RECORD:READ', 'MEDICAL_RECORD:UPDATE', 'MEDICAL_RECORD:APPROVE',
                'APPOINTMENT:READ', 'APPOINTMENT:UPDATE', 'APPOINTMENT:ASSIGN_DOCTOR',
                'PRESCRIPTION:READ', 'PRESCRIPTION:UPDATE', 'PRESCRIPTION:APPROVE',
                'TESTING:READ', 'TESTING:UPDATE', 'TESTING:APPROVE',
                'REPORT:READ', 'REPORT:CREATE', 'REPORT:EXPORT',
                'USER:READ', 'USER:UPDATE'
            ]
        },
        {
            'name': 'Doctor',
            'description': 'B√°c sƒ© - Kh√°m l√¢m s√†ng, k√™ ƒë∆°n, ch·ªâ ƒë·ªãnh x√©t nghi·ªám',
            'role_type': 'DEPARTMENT',
            'permissions': [
                'PATIENT:READ', 'PATIENT:UPDATE', 'PATIENT:SEARCH',
                'MEDICAL_RECORD:CREATE', 'MEDICAL_RECORD:READ', 'MEDICAL_RECORD:UPDATE',
                'APPOINTMENT:READ', 'APPOINTMENT:UPDATE',
                'PRESCRIPTION:CREATE', 'PRESCRIPTION:READ', 'PRESCRIPTION:UPDATE', 'PRESCRIPTION:APPROVE',
                'TESTING:CREATE', 'TESTING:READ', 'TESTING:UPDATE',
                'REPORT:READ'
            ]
        },
        {
            'name': 'Nurse',
            'description': 'ƒêi·ªÅu d∆∞·ª°ng - ChƒÉm s√≥c b·ªánh nh√¢n, h·ªó tr·ª£ b√°c sƒ©',
            'role_type': 'DEPARTMENT',
            'permissions': [
                'PATIENT:READ', 'PATIENT:UPDATE',
                'MEDICAL_RECORD:READ', 'MEDICAL_RECORD:UPDATE',
                'APPOINTMENT:READ', 'APPOINTMENT:UPDATE',
                'TESTING:READ', 'TESTING:UPDATE',
                'PRESCRIPTION:READ'
            ]
        },
        {
            'name': 'Receptionist',
            'description': 'L·ªÖ t√¢n - ƒêƒÉng k√Ω kh√°m, ki·ªÉm tra BHYT, ƒë·∫∑t l·ªãch',
            'role_type': 'DEPARTMENT',
            'permissions': [
                'PATIENT:CREATE', 'PATIENT:READ', 'PATIENT:UPDATE', 'PATIENT:SEARCH',
                'APPOINTMENT:CREATE', 'APPOINTMENT:READ', 'APPOINTMENT:UPDATE', 'APPOINTMENT:DELETE',
                'BHYT:VERIFY', 'BHYT:READ',
                'PAYMENT:CREATE', 'PAYMENT:READ'
            ]
        },
        {
            'name': 'Pharmacist',
            'description': 'D∆∞·ª£c sƒ© - So·∫°n thu·ªëc, c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n thu·ªëc',
            'role_type': 'DEPARTMENT',
            'permissions': [
                'PATIENT:READ',
                'PRESCRIPTION:READ', 'PRESCRIPTION:UPDATE', 'PRESCRIPTION:PREPARE', 
                'PRESCRIPTION:DISPENSE', 'PRESCRIPTION:UPDATE_STATUS',
                'BHYT:READ'
            ]
        },
        {
            'name': 'Technician',
            'description': 'K·ªπ thu·∫≠t vi√™n - Th·ª±c hi·ªán x√©t nghi·ªám, c·∫≠p nh·∫≠t k·∫øt qu·∫£',
            'role_type': 'DEPARTMENT',
            'permissions': [
                'PATIENT:READ',
                'TESTING:READ', 'TESTING:UPDATE', 'TESTING:PERFORM',
                'REPORT:READ'
            ]
        },
        {
            'name': 'Cashier',
            'description': 'Thu ng√¢n - X·ª≠ l√Ω thanh to√°n, quy·∫øt to√°n BHYT',
            'role_type': 'DEPARTMENT',
            'permissions': [
                'PATIENT:READ',
                'PAYMENT:CREATE', 'PAYMENT:READ', 'PAYMENT:UPDATE', 'PAYMENT:APPROVE',
                'BHYT:READ', 'BHYT:SETTLEMENT'
            ]
        },
        {
            'name': 'Patient',
            'description': 'B·ªánh nh√¢n - Xem th√¥ng tin c√° nh√¢n, l·ªãch kh√°m',
            'role_type': 'EXTERNAL',
            'permissions': [
                'PATIENT:READ',  # Ch·ªâ xem th√¥ng tin c·ªßa m√¨nh
                'APPOINTMENT:READ',  # Ch·ªâ xem l·ªãch kh√°m c·ªßa m√¨nh
                'MEDICAL_RECORD:READ',  # Ch·ªâ xem h·ªì s∆° c·ªßa m√¨nh
                'PRESCRIPTION:READ',  # Ch·ªâ xem ƒë∆°n thu·ªëc c·ªßa m√¨nh
                'TESTING:READ',  # Ch·ªâ xem k·∫øt qu·∫£ x√©t nghi·ªám c·ªßa m√¨nh
                'PAYMENT:READ'  # Ch·ªâ xem thanh to√°n c·ªßa m√¨nh
            ]
        }
    ]
    
    created_roles = []
    for role_info in roles_data:
        role, created = Role.objects.get_or_create(
            name=role_info['name'],
            defaults={
                'description': role_info['description'],
                'role_type': role_info['role_type']
            }
        )
        
        # G√°n permissions cho role th√¥ng qua RolePermission
        if role_info['permissions'] == ['*']:
            # Super Admin - t·∫•t c·∫£ permissions
            permissions = Permission.objects.all()
        else:
            # C√°c role kh√°c - permissions c·ª• th·ªÉ
            permissions = Permission.objects.filter(name__in=role_info['permissions'])
        
        # X√≥a permissions c≈©
        role.permissions.all().delete()
        
        # T·∫°o RolePermission m·ªõi
        from apps.users.models import RolePermission
        role_permissions = []
        for permission in permissions:
            role_permissions.append(RolePermission(role=role, permission=permission))
        
        RolePermission.objects.bulk_create(role_permissions)
        created_roles.append(role)
        
        if created:
            print(f"‚úÖ Created role: {role.name} with {permissions.count()} permissions")
        else:
            print(f"‚ÑπÔ∏è  Role already exists: {role.name} with {permissions.count()} permissions")
    
    print(f"\nüìä Total roles: {len(created_roles)}")
    return created_roles

def create_demo_users():
    """T·∫°o c√°c user demo ƒë·ªÉ test"""
    
    # T·∫°o superuser n·∫øu ch∆∞a c√≥
    if not User.objects.filter(is_superuser=True).exists():
        superuser = User.objects.create_superuser(
            username='admin',
            email='admin@hospital.com',
            password='admin123',
            first_name='Super',
            last_name='Admin'
        )
        print(f"‚úÖ Created superuser: {superuser.username}")
    
    # T·∫°o c√°c user demo kh√°c
    demo_users = [
        {
            'username': 'doctor1',
            'email': 'doctor1@hospital.com',
            'password': 'doctor123',
            'first_name': 'Nguy·ªÖn VƒÉn',
            'last_name': 'B√°c Sƒ©',
            'role_name': 'Doctor'
        },
        {
            'username': 'nurse1',
            'email': 'nurse1@hospital.com',
            'password': 'nurse123',
            'first_name': 'Tr·∫ßn Th·ªã',
            'last_name': 'ƒêi·ªÅu D∆∞·ª°ng',
            'role_name': 'Nurse'
        },
        {
            'username': 'reception1',
            'email': 'reception1@hospital.com',
            'password': 'reception123',
            'first_name': 'L√™ VƒÉn',
            'last_name': 'L·ªÖ T√¢n',
            'role_name': 'Receptionist'
        },
        {
            'username': 'pharmacist1',
            'email': 'pharmacist1@hospital.com',
            'password': 'pharmacist123',
            'first_name': 'Ph·∫°m Th·ªã',
            'last_name': 'D∆∞·ª£c Sƒ©',
            'role_name': 'Pharmacist'
        }
    ]
    
    for user_info in demo_users:
        user, created = User.objects.get_or_create(
            username=user_info['username'],
            defaults={
                'email': user_info['email'],
                'first_name': user_info['first_name'],
                'last_name': user_info['last_name'],
                'is_staff': True
            }
        )
        
        # ƒê·∫£m b·∫£o user c√≥ is_staff=True ƒë·ªÉ c√≥ th·ªÉ login
        if not user.is_staff:
            user.is_staff = True
            user.save()
        
        if created:
            user.set_password(user_info['password'])
            user.save()
            print(f"‚úÖ Created user: {user.username}")
        
        # G√°n role cho user
        try:
            role = Role.objects.get(name=user_info['role_name'])
            user_role, created = UserRole.objects.get_or_create(
                user=user,
                role=role
            )
            if created:
                print(f"‚úÖ Assigned role {role.name} to user {user.username}")
        except Role.DoesNotExist:
            print(f"‚ö†Ô∏è  Role {user_info['role_name']} not found for user {user.username}")

def main():
    """Main function ƒë·ªÉ setup to√†n b·ªô permission system"""
    print("üè• Setting up Hospital Management System Permissions...")
    print("=" * 60)
    
    try:
        # 1. T·∫°o permissions
        print("\n1Ô∏è‚É£ Creating permissions...")
        permissions = create_permissions()
        
        # 2. T·∫°o roles
        print("\n2Ô∏è‚É£ Creating roles...")
        roles = create_roles()
        
        # 3. T·∫°o demo users
        print("\n3Ô∏è‚É£ Creating demo users...")
        create_demo_users()
        
        print("\n" + "=" * 60)
        print("üéâ Permission system setup completed successfully!")
        print("\nüìã Summary:")
        print(f"   ‚Ä¢ Permissions: {Permission.objects.count()}")
        print(f"   ‚Ä¢ Roles: {Role.objects.count()}")
        print(f"   ‚Ä¢ Users: {User.objects.count()}")
        
        print("\nüîë Demo accounts:")
        print("   ‚Ä¢ Super Admin: admin / admin123")
        print("   ‚Ä¢ Doctor: doctor1 / doctor123")
        print("   ‚Ä¢ Nurse: nurse1 / nurse123")
        print("   ‚Ä¢ Receptionist: reception1 / reception123")
        print("   ‚Ä¢ Pharmacist: pharmacist1 / pharmacist123")
        
        print("\nüí° Next steps:")
        print("   1. Test login v·ªõi c√°c t√†i kho·∫£n demo")
        print("   2. Test API endpoints v·ªõi t·ª´ng role")
        print("   3. Customize permissions theo y√™u c·∫ßu c·ª• th·ªÉ")
        
    except Exception as e:
        print(f"\n‚ùå Error during setup: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
