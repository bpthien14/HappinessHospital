/**
 * Example: How to use Services Configuration
 * C√°ch s·ª≠ d·ª•ng Services Configuration trong appointments.js
 */

// V√ç D·ª§ S·ª¨ D·ª§NG SERVICES CONFIGURATION

// 1. C√°ch c≈© (hardcode URL):
// const response = await axios.get('/api/appointments/');
// const doctorResponse = await axios.get('/api/doctors/');

// 2. C√°ch m·ªõi (s·ª≠ d·ª•ng Services Configuration):

// === C√°ch 1: S·ª≠ d·ª•ng ServiceHelper (ƒê∆°n gi·∫£n nh·∫•t) ===
async function loadAppointments_NEW() {
    try {
        // Thay v√¨: '/api/appointments/'
        const appointmentsURL = ServiceHelper.getAppointmentsURL();
        const response = await axios.get(appointmentsURL);
        
        // Thay v√¨: '/api/doctors/' 
        const doctorsURL = ServiceHelper.getDoctorsURL();
        const doctorResponse = await axios.get(doctorsURL);
        
        console.log('‚úÖ URLs:', { appointmentsURL, doctorsURL });
        
    } catch (error) {
        console.error('‚ùå Error:', error);
    }
}

// === C√°ch 2: S·ª≠ d·ª•ng getEndpointURL (Linh ho·∫°t h∆°n) ===
async function getAppointmentDetail_NEW(appointmentId) {
    try {
        // T·ª± ƒë·ªông thay th·∫ø {id} b·∫±ng appointmentId
        const url = getEndpointURL('MAIN_APP', 'APPOINTMENTS') + `${appointmentId}/`;
        // Ho·∫∑c d√πng ServiceHelper
        const url2 = ServiceHelper.getAppointmentDetailURL(appointmentId);
        
        const response = await axios.get(url);
        console.log('‚úÖ Appointment detail URL:', url);
        
    } catch (error) {
        console.error('‚ùå Error:', error);
    }
}

// === C√°ch 3: S·ª≠ d·ª•ng getServiceURL (Khi c·∫ßn custom endpoint) ===
async function customEndpoint_NEW() {
    try {
        const baseURL = getServiceURL('APPOINTMENTS_SERVICE'); // http://localhost:8003
        const customURL = `${baseURL}/api/appointments/statistics/`;
        
        const response = await axios.get(customURL);
        console.log('‚úÖ Custom URL:', customURL);
        
    } catch (error) {
        console.error('‚ùå Error:', error);
    }
}

// === C√°ch 4: Chuy·ªÉn ƒë·ªïi gi·ªØa Monolith v√† Microservices ===
function switchToMicroservices() {
    // Trong file services.js, ƒë·ªïi CURRENT_ENV = 'PRODUCTION'
    // Ho·∫∑c ƒë·ªïi USE_MICROSERVICES = true
    
    // T·∫•t c·∫£ URL s·∫Ω t·ª± ƒë·ªông chuy·ªÉn t·ª´:
    // http://localhost:8000/api/appointments/ (Monolith)
    // Sang:
    // http://localhost:8003/api/appointments/ (Microservice)
}

// === V√ç D·ª§ TH·ª∞C T·∫æ: C·∫≠p nh·∫≠t loadAppointments function ===
async function loadAppointments_UPDATED(page = 1) {
    console.log('üìÖ Loading appointments, page:', page);
    
    try {
        // Build URL v·ªõi params
        const params = new URLSearchParams({
            page: page,
            page_size: 10
        });

        // Thay v√¨ hardcode '/api/appointments/'
        const baseURL = ServiceHelper.getAppointmentsURL();
        const url = `${baseURL}?${params.toString()}`;
        
        console.log('üìÖ API URL:', url);
        const response = await axios.get(url);
        
        // ... rest of the function
        
    } catch (error) {
        console.error('‚ùå Error loading appointments:', error);
    }
}

// === V√ç D·ª§: Load form data v·ªõi Services Config ===
async function loadFormData_UPDATED() {
    try {
        // Load patients
        const patientsURL = ServiceHelper.getPatientsURL();
        const patientResponse = await axios.get(patientsURL);
        
        // Load doctors
        const doctorsURL = ServiceHelper.getDoctorsURL();
        const doctorResponse = await axios.get(doctorsURL);
        
        // Load departments
        const departmentsURL = ServiceHelper.getDepartmentsURL();
        const departmentResponse = await axios.get(departmentsURL);
        
        console.log('‚úÖ Form data URLs:', {
            patients: patientsURL,
            doctors: doctorsURL,
            departments: departmentsURL
        });
        
    } catch (error) {
        console.error('‚ùå Error loading form data:', error);
    }
}

// === V√ç D·ª§: CRUD Operations v·ªõi Services Config ===
async function createAppointment_UPDATED(formData) {
    try {
        const url = ServiceHelper.getAppointmentsURL();
        const response = await axios.post(url, formData);
        console.log('‚úÖ Created appointment via:', url);
        return response.data;
    } catch (error) {
        console.error('‚ùå Error creating appointment:', error);
        throw error;
    }
}

async function updateAppointment_UPDATED(appointmentId, formData) {
    try {
        const url = ServiceHelper.getAppointmentDetailURL(appointmentId);
        const response = await axios.put(url, formData);
        console.log('‚úÖ Updated appointment via:', url);
        return response.data;
    } catch (error) {
        console.error('‚ùå Error updating appointment:', error);
        throw error;
    }
}

async function deleteAppointment_UPDATED(appointmentId) {
    try {
        const url = ServiceHelper.getAppointmentDetailURL(appointmentId);
        await axios.delete(url);
        console.log('‚úÖ Deleted appointment via:', url);
    } catch (error) {
        console.error('‚ùå Error deleting appointment:', error);
        throw error;
    }
}

// === L·ª¢I √çCH CUA SERVICES CONFIGURATION ===

/*
1. üéØ CENTRALIZED MANAGEMENT:
   - T·∫•t c·∫£ URL ƒë∆∞·ª£c qu·∫£n l√Ω ·ªü m·ªôt n∆°i
   - D·ªÖ d√†ng thay ƒë·ªïi port/host c·ªßa service
   - Kh√¥ng c·∫ßn t√¨m ki·∫øm trong nhi·ªÅu file

2. üîÑ EASY MIGRATION:
   - Chuy·ªÉn t·ª´ Monolith sang Microservices ch·ªâ b·∫±ng c√°ch ƒë·ªïi config
   - Kh√¥ng c·∫ßn s·ª≠a code trong t·ª´ng file

3. üõ† ENVIRONMENT SPECIFIC:
   - Development: d√πng localhost:8000 (monolith)
   - Production: d√πng microservices tr√™n c√°c port kh√°c nhau

4. üêõ DEBUGGING:
   - D·ªÖ d√†ng debug URL n√†o ƒëang ƒë∆∞·ª£c g·ªçi
   - Console.log c√°c URL ƒë·ªÉ ki·ªÉm tra

5. üß™ TESTING:
   - D·ªÖ d√†ng switch service endpoints cho testing
   - Mock services b·∫±ng c√°ch ƒë·ªïi URL

V√ç D·ª§ THAY ƒê·ªîI PORT:
- Mu·ªën ƒë·ªïi Prescriptions Service t·ª´ port 8004 sang 9004?
- Ch·ªâ c·∫ßn s·ª≠a trong services.js:
  PRESCRIPTIONS_SERVICE: {
    PORT: 9004,  // Thay v√¨ 8004
    BASE_URL: 'http://localhost:9004'
  }
- T·∫•t c·∫£ API calls s·∫Ω t·ª± ƒë·ªông d√πng port m·ªõi!
*/

console.log('üìñ Services Configuration Examples Loaded');
